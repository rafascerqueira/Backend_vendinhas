{"version":3,"sources":["../../src/config/auth.js"],"names":["secret","process","env","AUTH_SECRET","signin","req","res","email","password","body","user","User","findOne","select","isMatch","bcrypt","compare","now","Math","floor","Date","payload","id","name","fullname","admin","iat","exp","pow","json","token","jwt","sign","err","status","send","erro","validateToken","decode","result","Erro"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;AACA,MAAMA,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAA3B;;AAEO,MAAMC,MAAM,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACxC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,GAAG,CAACI,IAAhC;;AAEA,MAAI;AACF,iCAAYF,KAAZ,EAAmB,sBAAnB;AACA,iCAAYC,QAAZ,EAAsB,qBAAtB;AAEA,UAAME,IAAI,GAAG,MAAMC,cAAKC,OAAL,CAAa;AAAEL,MAAAA;AAAF,KAAb,EAAwBM,MAAxB,CAA+B,WAA/B,CAAnB;AAEA,iCAAYH,IAAZ,EAAkB,wBAAlB;AAEA,UAAMI,OAAO,GAAG,MAAMC,kBAAOC,OAAP,CAAeR,QAAf,EAAyBE,IAAI,CAACF,QAA9B,CAAtB;AACA,QAAI,CAACM,OAAL,EAAc,MAAM,2BAAN;AAEd,UAAMG,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACH,GAAL,KAAa,IAAxB,CAAZ;AAEA,UAAMI,OAAO,GAAG;AACdC,MAAAA,EAAE,EAAEZ,IAAI,CAACY,EADK;AAEdC,MAAAA,IAAI,EAAEb,IAAI,CAACc,QAFG;AAGdC,MAAAA,KAAK,EAAEf,IAAI,CAACe,KAHE;AAIdC,MAAAA,GAAG,EAAET,GAJS;AAKdU,MAAAA,GAAG,EAAEV,GAAG,GAAGC,IAAI,CAACU,GAAL,CAAS,EAAT,EAAa,CAAb,IAAkB,EAAlB,GAAuB;AALpB,KAAhB;AAQAtB,IAAAA,GAAG,CAACuB,IAAJ,CAAS,EACP,GAAGR,OADI;AAEPS,MAAAA,KAAK,EAAEC,sBAAIC,IAAJ,CAASX,OAAT,EAAkBrB,MAAlB;AAFA,KAAT;AAID,GAzBD,CAyBE,OAAOiC,GAAP,EAAY;AACZ3B,IAAAA,GAAG,CAAC4B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,IAAI,EAAG,GAAEH,GAAI;AAAf,KAArB;AACD;AACF,CA/BM;;;;AAiCA,MAAMI,aAAa,GAAG,OAAOhC,GAAP,EAAYC,GAAZ,KAAoB;AAC/C,QAAMI,IAAI,GAAGL,GAAG,CAACI,IAAJ,IAAY,IAAzB;;AACA,MAAI;AACF,QAAIC,IAAJ,EAAU;AACR,YAAMoB,KAAK,GAAGC,sBAAIO,MAAJ,CAAW5B,IAAI,CAACoB,KAAhB,EAAuB9B,MAAvB,CAAd;;AACA,YAAMuC,MAAM,GAAG,gCAAeT,KAAf,CAAf;AAEA,YAAMxB,GAAG,CAAC6B,IAAJ,CAASI,MAAT,CAAN;AACD;AACF,GAPD,CAOE,OAAON,GAAP,EAAY;AACZ3B,IAAAA,GAAG,CAAC4B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEK,MAAAA,IAAI,EAAG,GAAEP,GAAI;AAAf,KAArB;AACD;AACF,CAZM","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport User from \"../models/User\";\nimport { emptyOrNull, isTokenExpired } from \"./validation\";\n\nimport \"dotenv/config\";\nconst secret = process.env.AUTH_SECRET;\n\nexport const signin = async (req, res) => {\n  const { email, password } = req.body;\n\n  try {\n    emptyOrNull(email, \"E-mail não informado\");\n    emptyOrNull(password, \"Senha não informada\");\n\n    const user = await User.findOne({ email }).select(\"+password\");\n\n    emptyOrNull(user, \"Usuário não encontrado\");\n\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) throw \"E-mail / Senha inválidos!\";\n\n    const now = Math.floor(Date.now() / 1000);\n\n    const payload = {\n      id: user.id,\n      name: user.fullname,\n      admin: user.admin,\n      iat: now,\n      exp: now + Math.pow(60, 2) * 24 * 1,\n    };\n\n    res.json({\n      ...payload,\n      token: jwt.sign(payload, secret),\n    });\n  } catch (err) {\n    res.status(400).send({ erro: `${err}` });\n  }\n};\n\nexport const validateToken = async (req, res) => {\n  const user = req.body || null;\n  try {\n    if (user) {\n      const token = jwt.decode(user.token, secret);\n      const result = isTokenExpired(token);\n\n      await res.send(result);\n    }\n  } catch (err) {\n    res.status(403).send({ Erro: `${err}` });\n  }\n};\n"],"file":"auth.js"}