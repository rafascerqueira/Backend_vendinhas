{"version":3,"sources":["../../src/controllers/orderHandler.js"],"names":["Customer","Order","require","module","exports","index","req","res","order","findAll","json","showSelectedOrders","status","body","orders","include","model","where","error","store","id","hasCustomer","length","create","customer_id","update","findOne","updtOrder","delete","destroy"],"mappings":"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","sourcesContent":["const { Customer, Order } = require(\"../database/postgres/models\");\n\nmodule.exports = {\n  async index(req, res) {\n    const order = await Order.findAll();\n\n    return res.json(order);\n  },\n\n  async showSelectedOrders(req, res) {\n    const { status } = req.body;\n    try {\n      const orders = await Order.findAll({\n        include: [{ model: Customer }],\n        where: { status },\n      });\n\n      return res.json(orders);\n    } catch (error) {\n      return res.status(404).json(error);\n    }\n  },\n\n  async store(req, res) {\n    const id = req.body.id;\n\n    try {\n      const hasCustomer = await Customer.findAll({ where: { id } });\n\n      if (hasCustomer.length < 1) throw \"Error, cannot find customer.\";\n\n      const order = await Order.create({ customer_id: id });\n      return res.status(201).json(order);\n    } catch (error) {\n      return res.status(404).json(error);\n    }\n  },\n\n  async update(req, res) {\n    const { id, status } = req.body;\n\n    try {\n      const order = await Order.findOne({ where: { id } });\n      if (order === null) throw \"Error, purchase order do not exists.\";\n\n      const updtOrder = await Order.update({ status }, { where: { id } });\n\n      return res.json(updtOrder);\n    } catch (error) {\n      return res.status(400).json(error);\n    }\n  },\n\n  async delete(req, res) {\n    const { id } = req.body;\n\n    try {\n      const order = await Order.destroy({ where: { id } });\n      if (order < 1) throw \"Error, purchase order do not exists.\";\n      return res.json(order);\n    } catch (error) {\n      return res.status(404).json(error);\n    }\n  },\n};\n"],"file":"orderHandler.js"}