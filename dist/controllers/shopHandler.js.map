{"version":3,"sources":["../../src/controllers/shopHandler.js"],"names":["Order","Order_items","Product","require","module","exports","index","req","res","shop","findAll","json","store","orderId","productId","quantity","body","purchase","create","order_id","product_id","price","findOne","attributes","where","id","total_amount","amount","parseFloat","update","error"],"mappings":";;AAAA,MAAM;AAAEA,EAAAA,KAAF;AAASC,EAAAA,WAAT;AAAsBC,EAAAA;AAAtB,IAAkCC,OAAO,CAAC,6BAAD,CAA/C;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACf,QAAMC,KAAN,CAAYC,GAAZ,EAAiBC,GAAjB,EAAsB;AACpB,UAAMC,IAAI,GAAG,MAAMR,WAAW,CAACS,OAAZ,EAAnB;AAEA,WAAOF,GAAG,CAACG,IAAJ,CAASF,IAAT,CAAP;AACD,GALc;;AAOf,QAAMG,KAAN,CAAYL,GAAZ,EAAiBC,GAAjB,EAAsB;AACpB,UAAM;AAAEK,MAAAA,OAAF;AAAWC,MAAAA,SAAX;AAAsBC,MAAAA;AAAtB,QAAmCR,GAAG,CAACS,IAA7C;;AAEA,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMhB,WAAW,CAACiB,MAAZ,CAAmB;AACxCC,QAAAA,QAAQ,EAAEN,OAD8B;AAExCO,QAAAA,UAAU,EAAEN,SAF4B;AAGxCC,QAAAA;AAHwC,OAAnB,CAAvB;AAMA,YAAM;AAAEM,QAAAA;AAAF,UAAY,MAAMnB,OAAO,CAACoB,OAAR,CAAgB;AACtCC,QAAAA,UAAU,EAAE,CAAC,OAAD,CAD0B;AAEtCC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,EAAE,EAAEX;AAAN;AAF+B,OAAhB,CAAxB;AAKA,YAAM;AAAEY,QAAAA;AAAF,UAAmB,MAAM1B,KAAK,CAACsB,OAAN,CAAc;AAC3CC,QAAAA,UAAU,EAAE,CAAC,cAAD,CAD+B;AAE3CC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,EAAE,EAAEZ;AAAN;AAFoC,OAAd,CAA/B;AAKA,YAAMc,MAAM,GAAGC,UAAU,CAACF,YAAD,CAAV,GAA2BL,KAAK,GAAGN,QAAlD;AAEA,YAAMf,KAAK,CAAC6B,MAAN,CAAa;AAAEH,QAAAA,YAAY,EAAEC;AAAhB,OAAb,EAAuC;AAAEH,QAAAA,KAAK,EAAE;AAAEC,UAAAA,EAAE,EAAEZ;AAAN;AAAT,OAAvC,CAAN;AAEA,aAAOL,GAAG,CAACG,IAAJ,CAASM,QAAT,CAAP;AACD,KAtBD,CAsBE,OAAOa,KAAP,EAAc;AACd,aAAOtB,GAAG,CAACG,IAAJ,CAASmB,KAAT,CAAP;AACD;AACF;;AAnCc,CAAjB","sourcesContent":["const { Order, Order_items, Product } = require(\"../database/postgres/models\");\n\nmodule.exports = {\n  async index(req, res) {\n    const shop = await Order_items.findAll();\n\n    return res.json(shop);\n  },\n\n  async store(req, res) {\n    const { orderId, productId, quantity } = req.body;\n\n    try {\n      const purchase = await Order_items.create({\n        order_id: orderId,\n        product_id: productId,\n        quantity,\n      });\n\n      const { price } = await Product.findOne({\n        attributes: [\"price\"],\n        where: { id: productId },\n      });\n\n      const { total_amount } = await Order.findOne({\n        attributes: [\"total_amount\"],\n        where: { id: orderId },\n      });\n\n      const amount = parseFloat(total_amount) + price * quantity;\n\n      await Order.update({ total_amount: amount }, { where: { id: orderId } });\n\n      return res.json(purchase);\n    } catch (error) {\n      return res.json(error);\n    }\n  },\n};\n"],"file":"shopHandler.js"}