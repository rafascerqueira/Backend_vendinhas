{"version":3,"sources":["../../src/controllers/userHandler.js"],"names":["save","req","res","email","body","User","findOne","user","create","password","undefined","send","err","status","erro","getUser","id","params","findById","updateUser","doc","findByIdAndUpdate","new","then","docs","catch","deleteUser","findByIdAndRemove"],"mappings":"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","sourcesContent":["import User from \"../models/User\";\nimport { emptyOrNull } from \"../config/validation\";\n\nexport const save = async (req, res) => {\n  const { email } = req.body;\n  try {\n    if (await User.findOne({ email })) throw \"Usuário já existe\";\n\n    const user = await User.create(req.body);\n    emptyOrNull(user, \"nenhum usuário\");\n\n    user.password = undefined;\n    return res.send({ user });\n  } catch (err) {\n    res.status(400).send({ erro: `${err}` });\n  }\n};\n\nexport const getUser = async (req, res) => {\n  const { email } = req.body;\n  const id = req.params.id;\n  try {\n    if (!id && !email) throw \"sem dados para pesquisar\";\n\n    if (id) {\n      let user = await User.findById(id);\n      return res.send({ user });\n    }\n\n    if (email) {\n      let user = await User.findOne({ email });\n      return res.send({ user });\n    }\n  } catch (err) {\n    res.status(400).send({ erro: `${err}` });\n  }\n};\n\nexport const updateUser = async (req, res) => {\n  const id = req.params.id;\n  const doc = req.body;\n\n  try {\n    emptyOrNull(id, \"id inválido\");\n    emptyOrNull(doc, \"sem dados para alteração\");\n\n    await User.findByIdAndUpdate(id, doc, { new: true })\n      .then(docs => {\n        if (docs) {\n          res.send({ docs });\n        } else {\n          throw \"Alteração não pode ser feita\";\n        }\n      })\n      .catch(err => {\n        throw err;\n      });\n  } catch (err) {\n    res.status(400).send({ erro: `${err}` });\n  }\n};\n\nexport const deleteUser = async (req, res) => {\n  const id = req.params.id;\n\n  try {\n    emptyOrNull(id, \"Usuário não encontrado\");\n    if (!(await User.findById(id))) throw \"Usuário não encontrado\";\n    await User.findByIdAndRemove(id);\n    return res.send(\"Usuário removido com sucesso\");\n  } catch (err) {\n    res.status(400).send({ erro: `${err}` });\n  }\n};\n"],"file":"userHandler.js"}